generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model transactions {
  id               Int       @id @default(autoincrement())
  uid              String?   @db.VarChar(255)
  portfolio_id     Int
  symbol           String    @db.VarChar(10)
  shares           Decimal   @db.Decimal(10, 2)
  price            Decimal   @db.Decimal(10, 2)
  transaction_type String    @db.VarChar(10)
  transaction_date DateTime? @default(dbgenerated("CURRENT_DATE")) @db.Date
  created_at       DateTime? @default(now()) @db.Timestamp(6)
  name             String?   @db.VarChar(255)
  asset_type       String?   @db.VarChar(255)
  fee              Decimal?  @db.Decimal(10, 2)
  users            users?    @relation(fields: [uid], references: [uid], onDelete: Cascade, onUpdate: NoAction, map: "transactions_user_id_fkey")
  portfolios       portfolios @relation(fields: [portfolio_id], references: [id], onDelete: Cascade)
}

model users {
  id           Int            @id @default(autoincrement())
  uid          String         @unique @db.VarChar(255)
  email        String         @unique @db.VarChar(255)
  display_name String?        @db.VarChar(255)
  created_at   DateTime?      @default(now()) @db.Timestamp(6)
  holdings     holdings[]
  transactions transactions[]
  portfolios   portfolios[]
}

model holdings {
  id                Int       @id @default(autoincrement())
  uid               String?   @db.VarChar(255)
  portfolio_id      Int
  symbol            String    @db.VarChar(10)
  company_name      String?   @db.VarChar(255)
  total_shares      Decimal?  @default(0) @db.Decimal(10, 2)
  avg_cost          Decimal?  @db.Decimal(10, 2)
  target_percentage Decimal?  @db.Decimal(5, 2)
  current_price     Decimal?  @db.Decimal(10, 2)
  created_at        DateTime? @default(now()) @db.Timestamp(6)
  last_updated      DateTime? @default(now()) @db.Timestamp(6)
  name              String?   @db.VarChar(255)
  asset_type        String?   @db.VarChar(255)
  users             users?    @relation(fields: [uid], references: [uid], onDelete: Cascade, onUpdate: NoAction)
  portfolios        portfolios @relation(fields: [portfolio_id], references: [id], onDelete: Cascade)

  @@unique([uid, symbol, portfolio_id], name: "uid_symbol_portfolio")
}

model portfolios {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  uid         String     @db.VarChar(255)
  created_at  DateTime?  @default(now()) @db.Timestamp(6)
  users       users      @relation(fields: [uid], references: [uid], onDelete: Cascade)
  holdings    holdings[]
  transactions transactions[]
  allocation allocation[]
  dividends   dividends[]
}

model allocation {
  id         Int     @id @default(autoincrement())
  uid        String   @db.VarChar(255)
  symbol     String   @db.VarChar(10)
  name       String?  @db.VarChar(255)
  target     Decimal  @db.Decimal(10, 2)
  portfolio_id Int

  // 關聯到 portfolios
  portfolios portfolios @relation(fields: [portfolio_id], references: [id], onDelete: Cascade)

  // @@index([uid, symbol])
  @@unique([uid, symbol, portfolio_id])
}

model dividends {
  id            Int       @id @default(autoincrement())
  uid           String    @db.VarChar(255)
  symbol        String    @db.VarChar(10)
  portfolio_id  Int
  date          DateTime
  amount        Decimal   @db.Decimal(10, 4)
  total_shares  Decimal   @db.Decimal(10, 2)
  total_amount  Decimal   @db.Decimal(12, 4)
  created_at    DateTime  @default(now()) @db.Timestamp(6)

  portfolios    portfolios @relation(fields: [portfolio_id], references: [id], onDelete: Cascade)

  // @@index([symbol, date])
  @@unique([uid, symbol, portfolio_id, date], name: "uid_symbol_portfolio_date")
}

